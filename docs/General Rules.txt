1. Comment Every Function

	Write a short description explaining what the function does, what parameters it takes, and what it returns (if anything).
	use:
		## Discription.
	if possible

2. Write Clear, Descriptive Names

	Name variables, functions, classes, and files clearly — no random abbreviations.

	Example: use calculate_total_price() instead of calcTP().

3. Stay Consistent With Style

	Follow the same indentation (tabs or spaces), and naming conventions throughout the project. (use snake_case)

4. Keep Functions Short

	Aim for functions that do one thing only.

	If a function gets too long or too messy, split it into helper functions.

5. Commit Often, With Good Messages

	Save progress frequently with clear, meaningful commit messages.

	Example: "Add login validation function" not "stuff" or "fix".

6. Document Major Decisions

	If you make an unusual or non-obvious choice, add a comment explaining why you did it.

	Example: "We use X here instead of Y because of performance issues."

7. Don't Leave Dead Code

	If you have code that's no longer needed, remove it — don't just comment it out.

	Use version control history if you ever need to bring it back.

8. Follow File/Folder Organization

	Stick to the agreed project structure. Put files where they belong.

9. Ask Questions Early

	If you're not sure about something, ask instead of guessing.
	
